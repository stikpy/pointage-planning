const { createClient } = require('@supabase/supabase-js');
require('dotenv').config({ path: '.env.local' });

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Variables d\'environnement manquantes');
  process.exit(1);
}

// Utiliser la cl√© de service pour bypasser RLS
const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function tempFixWithServiceKey() {
  try {
    console.log('üîß Solution temporaire avec cl√© de service...\n');

    // Test 1: V√©rifier que la cl√© de service fonctionne
    console.log('1Ô∏è‚É£ Test cl√© de service...');
    const { data: employees, error: empError } = await supabase
      .from('employees')
      .select('id, name, role')
      .limit(3);
    
    if (empError) {
      console.error('‚ùå Erreur cl√© de service:', empError.message);
      return;
    } else {
      console.log('‚úÖ Cl√© de service OK:', employees?.length || 0, 'employ√©s');
    }

    // Test 2: V√©rifier le storage
    console.log('\n2Ô∏è‚É£ Test storage...');
    const { data: buckets, error: bucketError } = await supabase
      .storage
      .listBuckets();
    
    if (bucketError) {
      console.error('‚ùå Erreur storage:', bucketError.message);
    } else {
      console.log('‚úÖ Storage OK:', buckets.length, 'buckets');
    }

    // Test 3: Test d'upload
    console.log('\n3Ô∏è‚É£ Test upload...');
    const canvas = require('canvas');
    const { createCanvas } = canvas;
    
    const testCanvas = createCanvas(1, 1);
    const ctx = testCanvas.getContext('2d');
    ctx.fillStyle = '#FF0000';
    ctx.fillRect(0, 0, 1, 1);
    
    const buffer = testCanvas.toBuffer('image/png');
    const blob = new Blob([buffer], { type: 'image/png' });
    
    const fileName = `test_${Date.now()}.png`;
    
    const { data: uploadData, error: uploadError } = await supabase
      .storage
      .from('clock-photos')
      .upload(fileName, blob);
    
    if (uploadError) {
      console.error('‚ùå Erreur upload:', uploadError.message);
    } else {
      console.log('‚úÖ Upload r√©ussi:', uploadData);
      
      // Nettoyer
      await supabase
        .storage
        .from('clock-photos')
        .remove([fileName]);
      console.log('   Test nettoy√©');
    }

    console.log('\nüéâ Solution temporaire valid√©e !');
    console.log('üìã Prochaines √©tapes :');
    console.log('1. Modifier lib/supabase.ts pour utiliser la cl√© de service temporairement');
    console.log('2. D√©ployer sur Vercel');
    console.log('3. Tester l\'application');
    console.log('4. Corriger les politiques RLS plus tard');

  } catch (error) {
    console.error('‚ùå Erreur g√©n√©rale:', error);
  }
}

// Ex√©cuter le script
tempFixWithServiceKey();
