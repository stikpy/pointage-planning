const { createClient } = require('@supabase/supabase-js');
require('dotenv').config({ path: '.env.local' });

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseAnonKey) {
  console.error('‚ùå Variables d\'environnement manquantes');
  process.exit(1);
}

// Utiliser la cl√© anonyme pour tester comme en production
const supabase = createClient(supabaseUrl, supabaseAnonKey);

async function testAfterRLSFix() {
  try {
    console.log('üß™ Test apr√®s correction RLS avec cl√© anonyme...\n');

    // Test 1: Acc√®s aux employ√©s
    console.log('1Ô∏è‚É£ Test acc√®s employ√©s...');
    const { data: employees, error: empError } = await supabase
      .from('employees')
      .select('id, name, role')
      .limit(3);
    
    if (empError) {
      console.error('‚ùå Erreur employ√©s:', empError.message);
      console.error('   D√©tails:', empError);
    } else {
      console.log('‚úÖ Employ√©s accessibles:', employees?.length || 0, 'enregistrements');
      console.log('   Exemple:', employees?.[0]);
    }

    // Test 2: Acc√®s aux cr√©neaux
    console.log('\n2Ô∏è‚É£ Test acc√®s cr√©neaux...');
    const { data: shifts, error: shiftError } = await supabase
      .from('shifts')
      .select('id, employee_id, start_time, status')
      .limit(3);
    
    if (shiftError) {
      console.error('‚ùå Erreur cr√©neaux:', shiftError.message);
    } else {
      console.log('‚úÖ Cr√©neaux accessibles:', shifts?.length || 0, 'enregistrements');
    }

    // Test 3: Acc√®s aux photos
    console.log('\n3Ô∏è‚É£ Test acc√®s photos...');
    const { data: photos, error: photoError } = await supabase
      .from('clock_photos')
      .select('id, employee_id, timestamp')
      .limit(3);
    
    if (photoError) {
      console.error('‚ùå Erreur photos:', photoError.message);
    } else {
      console.log('‚úÖ Photos accessibles:', photos?.length || 0, 'enregistrements');
    }

    // Test 4: Test d'insertion d'un cr√©neau
    console.log('\n4Ô∏è‚É£ Test insertion cr√©neau...');
    const testShift = {
      employee_id: 'emp_1',
      start_time: new Date().toISOString(),
      status: 'active'
    };

    const { data: insertData, error: insertError } = await supabase
      .from('shifts')
      .insert(testShift)
      .select();

    if (insertError) {
      console.error('‚ùå Erreur insertion:', insertError.message);
    } else {
      console.log('‚úÖ Insertion cr√©neau r√©ussie:', insertData);
      
      // Nettoyer le test
      if (insertData && insertData[0]) {
        await supabase
          .from('shifts')
          .delete()
          .eq('id', insertData[0].id);
        console.log('   Test nettoy√©');
      }
    }

    // Test 5: Test d'upload d'image
    console.log('\n5Ô∏è‚É£ Test upload image...');
    const canvas = require('canvas');
    const { createCanvas } = canvas;
    
    const testCanvas = createCanvas(1, 1);
    const ctx = testCanvas.getContext('2d');
    ctx.fillStyle = '#FF0000';
    ctx.fillRect(0, 0, 1, 1);
    
    const buffer = testCanvas.toBuffer('image/png');
    const blob = new Blob([buffer], { type: 'image/png' });
    
    const fileName = `test_${Date.now()}.png`;
    
    const { data: uploadData, error: uploadError } = await supabase
      .storage
      .from('clock-photos')
      .upload(fileName, blob);
    
    if (uploadError) {
      console.error('‚ùå Erreur upload:', uploadError.message);
    } else {
      console.log('‚úÖ Upload r√©ussi:', uploadData);
      
      // Nettoyer le test
      await supabase
        .storage
        .from('clock-photos')
        .remove([fileName]);
      console.log('   Test nettoy√©');
    }

    console.log('\nüéâ Tests termin√©s !');

  } catch (error) {
    console.error('‚ùå Erreur g√©n√©rale:', error);
  }
}

// Ex√©cuter le test
testAfterRLSFix();
